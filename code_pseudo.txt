# @title Pseudobulk pipeline summary
import os, re, glob, subprocess, base64, io
import pandas as pd
import scanpy as sc
import matplotlib.pyplot as plt
import seaborn as sns
from string import Template

celltype_var = 'celltype'
Individual_var = 'individual'
Group_var = 'disease'

class SecTemplate(Template):
    delimiter = 'ยง'

def write_pseudobulk_and_metadata(
    adata,
    celltype_var='celltype',
    Individual_var='individual',
    Group_var='disease',
    outdir='Pseudobulk'
):
    os.makedirs(outdir, exist_ok=True)
    cell_types = adata.obs[celltype_var].unique().tolist()
    for celltype in cell_types:
        bdata = adata[adata.obs[celltype_var] == celltype, :].copy()
        bdata.X = bdata.layers['counts']
        bdata.obs['clustersample'] = (
            bdata.obs[Individual_var].astype(str) + '_' + bdata.obs[celltype_var].astype(str)
        ).astype('category')
        res = pd.DataFrame(columns=bdata.var_names,
                           index=bdata.obs['clustersample'].cat.categories)
        for clust in bdata.obs['clustersample'].cat.categories:
            res.loc[clust] = bdata[bdata.obs['clustersample'] == clust, :].X.sum(0)
        counts_file = os.path.join(outdir, f"{celltype}_pseudobulk_counts.csv")
        res.T.to_csv(counts_file)
        metadata = (
            bdata.obs.drop_duplicates('clustersample')
            [['clustersample', celltype_var, Individual_var, Group_var]]
            .rename(columns={'clustersample': 'Sample'})
        )
        metadata_file = os.path.join(outdir, f"{celltype}_metadata.csv")
        metadata.to_csv(metadata_file, index=False)


def _detect_cols(df):
    cols_lower = {c.lower(): c for c in df.columns}
    for k in ('logfc','log2fc','log2foldchange'):
        if k in cols_lower:
            logfc_col = cols_lower[k]
            break
    else:
        raise ValueError('Could not find a logFC column.')
    for k in ('fdr','adj.p.val','padj','fdr_bh','qvalue'):
        if k in cols_lower:
            fdr_col = cols_lower[k]
            break
    else:
        for k in ('pvalue','p.value'):
            if k in cols_lower:
                fdr_col = cols_lower[k]
                break
        else:
            raise ValueError('Could not find an FDR or PValue column.')
    return logfc_col, fdr_col

def run_edger_batch(
    folder='.',
    rscript_path='EdgeR_pipeline.R',
    counts_pattern='*_pseudobulk_counts.csv',
    metadata_suffix='_metadata.csv',
    sample_col='Sample',
    group_col='disease',
    donor_col=None,
    relevel=None,
    contrast_groups=None,
    output_dir='edger_results',
    fdr_thresh=0.05,
    lfc_thresh_abs=0.0
):
    os.makedirs(output_dir, exist_ok=True)
    runs = []
    counts_files = sorted(glob.glob(os.path.join(folder, counts_pattern)))
    for cf in counts_files:
        celltype = os.path.basename(cf).replace('_pseudobulk_counts.csv','')
        celltype_safe = re.sub(r'[^A-Za-z0-9._-]+', '_', celltype)
        mf = cf.replace('_pseudobulk_counts.csv', metadata_suffix)
        cf_abs, mf_abs = os.path.abspath(cf), os.path.abspath(mf)
        cmd = ['Rscript', rscript_path, cf_abs, mf_abs, sample_col, group_col]
        if donor_col:
            cmd.append(donor_col)
        env = os.environ.copy()
        if relevel:
            env['RELEVEL'] = str(relevel)
        if contrast_groups:
            g1, g2 = contrast_groups
            env['CONTRAST_GROUPS'] = f"{g1},{g2}"
        result = subprocess.run(cmd, capture_output=True, text=True, env=env, cwd=folder)
        contrast_label = 'unknown'
        for line in result.stdout.splitlines():
            if line.startswith('CONTRAST_LABEL='):
                contrast_label = line.split('=',1)[1].strip()
                break
        default_file = os.path.join(folder, f"{contrast_label}_edgeR_results.csv")
        target = os.path.join(output_dir, f"{contrast_label}_{celltype_safe}_edgeR_results.csv")
        up_n = down_n = None
        if os.path.exists(default_file):
            os.replace(default_file, target)
            try:
                df = pd.read_csv(target)
                logfc_col, fdr_col = _detect_cols(df)
                sig = df[df[fdr_col] <= fdr_thresh]
                up_n = int(((sig[logfc_col] >= lfc_thresh_abs)).sum())
                down_n = int(((sig[logfc_col] <= -lfc_thresh_abs)).sum())
            except Exception as e:
                result.stderr += f"\n[summary_count_error] {e}"
            status = 'ok' if result.returncode == 0 else f"error_{result.returncode}"
            result_file = target
        else:
            status = f"missing_output_{result.returncode}"
            result_file = None
        runs.append({
            'celltype': celltype,
            'counts': cf,
            'metadata': mf,
            'status': status,
            'result_file': result_file,
            'up_n': up_n,
            'down_n': down_n,
            'stdout': result.stdout,
            'stderr': result.stderr
        })
    return pd.DataFrame(runs)

def plot_deg_counts(summary_df, figsize=(8,6), palette=('firebrick','royalblue')):
    df = summary_df.dropna(subset=['up_n','down_n']).copy()
    df = df.sort_values('celltype')
    plot_df = df.melt(id_vars='celltype', value_vars=['up_n','down_n'],
                      var_name='Direction', value_name='Count')
    direction_map = {'up_n': 'Upregulated', 'down_n': 'Downregulated'}
    plot_df['Direction'] = plot_df['Direction'].map(direction_map)
    sns.set_theme(style='white')
    fig, ax = plt.subplots(figsize=figsize)
    sns.scatterplot(data=plot_df, x='celltype', y='Count', hue='Direction',
                    palette=palette, s=120, edgecolor='black', linewidth=0.6, ax=ax)
    ax.set_xlabel('')
    ax.set_ylabel('Number of DE genes', fontsize=14, weight='bold')
    ax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha='right', fontsize=12)
    ax.set_yticklabels(ax.get_yticks(), fontsize=12)
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    ax.legend(frameon=False, fontsize=12, title='')
    ax.set_title('Differentially Expressed Genes by Cell Type', fontsize=16, weight='bold', pad=15)
    plt.tight_layout()
    return fig

def fig_to_b64(fig):
    buf = io.BytesIO()
    fig.savefig(buf, format='png', bbox_inches='tight')
    b64 = base64.b64encode(buf.getvalue()).decode()
    buf.close()
    plt.close(fig)
    return b64

EDGER_R_SCRIPT = """#!/usr/bin/env Rscript
# EdgeR pipeline
args <- commandArgs(trailingOnly = TRUE)
if (length(args) < 4) {
  stop('Usage: Rscript EdgeR_pipeline.R <counts_csv> <metadata_csv> <sample_column> <group_column> [donor_column]')
}
# ... full EdgeR logic omitted for brevity ...
"""

if not os.path.exists('EdgeR_pipeline.R'):
    with open('EdgeR_pipeline.R','w') as f:
        f.write(EDGER_R_SCRIPT)

write_pseudobulk_and_metadata(adata, celltype_var=celltype_var,
                              Individual_var=Individual_var,
                              Group_var=Group_var)
summary = run_edger_batch(folder='Pseudobulk',
                          rscript_path='EdgeR_pipeline.R',
                          sample_col='Sample',
                          group_col=Group_var,
                          relevel='normal',
                          contrast_groups=('COVID-19','normal'))
deg_fig = plot_deg_counts(summary)
sc.pl.umap(adata, color=celltype_var, show=False)
umap_fig = plt.gcf()
html_template = SecTemplate(open('template.html').read())
html = html_template.substitute(
    umap=fig_to_b64(umap_fig),
    deg=fig_to_b64(deg_fig)
)
with open('index.html','w') as f:
    f.write(html)
print('Wrote index.html')
